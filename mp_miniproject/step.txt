Step 3: Directories and variables
---------------------------------

   1. Add the "cd" command to change the current directory. See the chdir
      function.
   2. The prompt should show the current directory before the $.
      That is, if your current directory is /home/drew, the prompt should
      be
        myShell:/home/drew $
   3. Your shell should provide access to variables. A variable name
      must be a combination of letters (case sensitive), underscores,
      and numbers, (e.g., PATH, xyz, abc42, my_var).  Note that
      $var1$var2 is legal: if var1=a and var2=b, then $var1$var2
      expands to ab.  Likewise, $var1- is legal: it is $var1 followed
      immediately by - (so again if var1=a, it would be a-).
   4. If the user writes $varname on the command line, your shell should
      replace it with the current value of that variable.
   5. You should provide three built in commands:
      - set var value
        This should set the variable var to the string on the rest of the
	command line (even if it contains spaces, etc.) Your shell should
	remember this value, and make use of it in future $ evaluations;
	however, it should not be placed in the environment for other
	programs.
      - export var
        This should put the current value of var into the environment for
	other programs. Note that you may find the "env" command useful for
	testing this.
      - inc var
        Interprets the value of var as a number (base10), and increments it.
        If var is not currently set, or does not represent a number
	in base10, then the intiial value is treated as 0 (and thus
        incremented to 1)
	  For example
	    set v hello
	    //v is now "hello"
	    inc v
	    //v is now "1"
	    inc v
	    //v is now "2"
   6. If you "set" a variable (but dont "export" it) the new value should
      not show up in "env." If you "export" it, the new value should show
      up in "env".

  Note also that if the user changes PATH, it should affect where your shell
  searches for programs.
