Step 4: Pipes and redirection
-----------------------------

  - Implement input redirection (<) and output redirection (>)
      < filename   redirects standard input for the command
      > filename   redirects standard ouput
      2> filename  redirects standard error
    Note that you will need to implement these between the fork()
    and execve() calls.  You will need to make use of close()
    on the relevant file descriptors (0 = stdin, 1 = stdout, 2 = stderr)
    use open() to open the appropriate file.  You may also need to make
    use of dup2().

  - Implement pipes (|)
    You should be able to run one command and pipe its output to another's
    input:
      ./myProgram | ./anotherProgram
    See the pipe() system call.

  Note that you need to be able to mix and match these in ways that make
  sense, along with having command line arguments:
    ./myProgram a b c < anInputFile | ./anotherProgram 23 45 > someOutputFile
  NOTE: It is very easy to write a broken implementation of pipes which
  LOOKS like it works on short input (< 65536 bytes) but deadlocks on longer
  input. Your implemenation must work correctly when sending large
  amounts of data through the pipe for full credit.

  Using fcntl with F_SETPIPE_SZ to adjust the kernel buffer size to
  "larger than you think we will test with" is NOT a valid approach.
  If we see you trying to do this, you will get no credit for part 4.
  
 For Part 4, you may refer to parts 11 through 15 of the gnu libc reference:
 https://www.gnu.org/software/libc/manual/html_node/index.html#toc-Introduction-1
 for additional background on file descriptors and pipes.
 
